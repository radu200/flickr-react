{"version":3,"sources":["components/FrlickrCard.js","components/Search.js","components/FlickrService.js","App.js","serviceWorker.js","index.js"],"names":["FlickrCard","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","extractAuthorName","bind","assertThisInitialized","extractTags","authorProp","openBracketIdx","indexOf","closingBracketIdx","slice","replace","tags","split","join","_this2","react_default","a","createElement","className","data","map","item","index","key","alt","title","src","media","m","href","link","concat","author_id","author","description","Component","protoTypes","PropTypes","arrayOf","shape","string","isRequired","SearchInput","_ref","onChange","value","Fragment","placeholder","required","type","Flickr","onTextChange","e","val","target","setState","query","state","JSONP","param","res","items","_this3","SearchResults","filter","toLowerCase","Search","FrlickrCard","object","App","FlickrService","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.62b7eefb.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n\nclass FlickrCard extends Component {\n  constructor(props) {\n    super(props);\n\n    this.extractAuthorName = this.extractAuthorName.bind(this);\n    this.extractTags = this.extractTags.bind(this);\n  }\n  extractAuthorName(authorProp) {\n    // remove parentheses from author name\n    const openBracketIdx = authorProp.indexOf(\"(\");\n    const closingBracketIdx = authorProp.indexOf(\")\");\n    const authorInQuotes = authorProp.slice(\n      openBracketIdx + 1,\n      closingBracketIdx\n    );\n\n    return authorInQuotes.replace(/['\"]+/g, \"\");\n  }\n\n  extractTags(tags) {\n    //add commas after each tag\n    const tag = tags.split(\" \").join(\", \");\n    return tag;\n  }\n\n  render() {\n    return (\n      <div className=\"row\">\n        {this.props.data.map((item, index) => {\n          return (\n            <div key={index} className=\"card\">\n              <img className=\"card-image\" alt={item.title} src={item.media.m} />\n\n              <div className=\"card-body\">\n                <a className=\"card-title\" href={item.link}>\n                  {item.title}\n                </a>{\" \"}\n                by{\" \"}\n                <a\n                  className=\"author-name\"\n                  href={`https://www.flickr.com/people/${item.author_id}`}\n                >\n                  {this.extractAuthorName(item.author)}\n                </a>\n                <p className=\"card-description\">\n                  {item.description.replace(/<\\/?[^>]+(>|$)/g, \"\")}{\" \"}\n                </p>\n              </div>\n\n              <div className=\"card-footer\">\n                <p className=\"card-tags\">Tags: {this.extractTags(item.tags)}</p>\n              </div>\n            </div>\n          );\n        })}\n      </div>\n    );\n  }\n}\n\nFlickrCard.protoTypes = {\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      media: PropTypes.string.isRequired,\n      title: PropTypes.string.isRequired,\n      description: PropTypes.string.isRequired,\n      link: PropTypes.string.isRequired,\n      tags: PropTypes.string.isRequired\n    })\n  )\n};\n\nexport default FlickrCard;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./scss/search.scss\";\n\nconst SearchInput = ({ onChange, value }) => {\n  return (\n    <>  \n      <form className=\"search-container\"> \n        <input\n          value={value}\n          onChange={onChange}\n          className=\"search-input\"\n          placeholder=\"Search\"\n          required\n        />\n        <button  className=\"search-btn\" type='submit'>Search</button>\n      </form>\n    </>\n  );\n};\n\nSearchInput.propTypes = {\n  onChange: PropTypes.func.isRequired,\n  value: PropTypes.string\n};\n\nexport default SearchInput;\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport FrlickrCard from \"./FrlickrCard\";\nimport SearchInput from \"./Search\";\nimport \"./scss/flickr.scss\";\nimport JSONP from \"jsonp\";\n\nclass Flickr extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: [],\n      query: \"\"\n    };\n    this.onTextChange = this.onTextChange.bind(this);\n  }\n\n  componentDidMount() {\n    let url = `https://api.flickr.com/services/feeds/photos_public.gne?tags=cats&format=json`;\n    JSONP(url, { param: \"jsoncallback\" }, (e, res) => {\n      const data = res.items;\n      this.setState({ data });\n    });\n  }\n\n  onTextChange = e => {\n    // get input value\n    const val = e.target.value;\n    this.setState({ query: val });\n  };\n\n  render() {\n    const SearchResults = this.state.data.filter(res => {\n      return (\n        res.tags.toLowerCase().indexOf(this.state.query.toLowerCase()) !== -1\n      );\n    });\n    return (\n        <>\n        <SearchInput value={this.state.value} onChange={this.onTextChange} />\n        <FrlickrCard data={SearchResults} />\n       </>\n    );\n  }\n}\nFlickr.protoTypes = {\n  SearchResults: PropTypes.object.isRequired\n};\nexport default Flickr;\n","import React, { Component } from 'react';\nimport Flickr from './components/FlickrService'\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Flickr/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}