{"version":3,"sources":["components/FrlickrCard.js","components/Search.js","components/FlickrService.js","App.js","serviceWorker.js","index.js"],"names":["Result","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","extractAuthorName","bind","assertThisInitialized","extractTags","authorProp","openBracketIdx","indexOf","closingBracketIdx","slice","replace","tags","split","join","_this2","react_default","a","createElement","className","data","map","item","index","key","alt","title","src","media","m","href","link","concat","author_id","author","description","Component","SearchInput","_ref","onSubmit","onChange","value","placeholder","Flickr","onTextChange","e","val","target","setState","query","state","JSONP","param","res","items","_this3","filter","toLowerCase","Search","FrlickrCard","App","FlickrService","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.70bd71d7.chunk.js","sourcesContent":["\nimport React, { Component } from 'react';\nclass Result extends Component {\n    constructor(props){\n        super(props)\n\n        this.extractAuthorName = this.extractAuthorName.bind(this);\n        this.extractTags = this.extractTags.bind(this)\n        \n    }\n    extractAuthorName(authorProp) {\n        // remove parentheses from author name\n        const openBracketIdx = authorProp.indexOf(\"(\");\n        const closingBracketIdx = authorProp.indexOf(\")\");\n        const authorInQuotes = authorProp.slice(openBracketIdx + 1, closingBracketIdx);\n    \n        return authorInQuotes.replace(/['\"]+/g, '');\n      }\n    \n      extractTags(tags){\n        //add commas after each tag\n        const tag = tags.split(' ').join(', ')\n        return tag;\n      }\n\n         render(){\n           return (\n                <div className=\"row\">\n                    {this.props.data.map((item,index) => {\n                        return(\n                                <div key={index} className=\"card\">\n                                        <img  className=\"card-image\"  alt={item.title} src={item.media.m}/>\n                                    \n                                        <div className=\"card-body\">\n                                            <a  className=\"card-title\"  href={item.link}>{item.title}</a> by <a className=\"author-name\"href={`https://www.flickr.com/people/${item.author_id}`}>{this.extractAuthorName(item.author)}</a>\n                                            <p  className=\"card-description\">{item.description.replace(/<\\/?[^>]+(>|$)/g, \"\")} </p>\n                                        </div>\n                                        \n                                        <div className=\"card-footer\">\n                                            <p className=\"card-tags\">Tags: {this.extractTags(item.tags)}</p>\n                                        </div>\n                                    </div>\n                                    )\n                                })\n                            }\n                    </div> \n                \n            )\n         }\n}\n\n\n\n\n\nexport default Result;","import React, { Component } from 'react';\nimport './scss/search.scss'\n  const SearchInput = ({onSubmit,onChange, value}) => {\n    return (\n      <div>\n      <form onSubmit={onSubmit}>\n        <input\n           value={value}\n           onChange={onChange}\n           className=\"search-input\"\n           placeholder=\"Search\"\n          />\n        </form>\n      </div>\n    );\n  }\n\n\nexport default SearchInput;","import React, { Component } from 'react';\nimport FrlickrCard from './FrlickrCard'\nimport SearchInput from './Search'\nimport './scss/flickr.scss'\nimport JSONP from 'jsonp'\n\n\nclass Flickr extends Component {\n  constructor(props){\n    super(props);\n      this.state = {\n        data: [],\n        query:''\n      }\n      this.onTextChange = this.onTextChange.bind(this)\n\n    }\n  \n  \n    \n     componentDidMount(){\n       let url = `https://api.flickr.com/services/feeds/photos_public.gne?tags=cats&format=json`;       \n       JSONP(url,{\"param\": \"jsoncallback\"},(e, res) => {\n          const data = res.items\n         this.setState({data});\n         \n       })\n     }\n    \n     onTextChange = (e) => {\n       // get input value\n       const val = e.target.value;\n       this.setState({query:val})\n  \n     }\n     \n  \n      \nrender() {\n  const res = this.state.data.filter((res) => {\n    return res.tags.toLowerCase().indexOf(this.state.query.toLowerCase()) !== -1;     \n  })\n    return (\n        <div className='container'>\n            <SearchInput \n              value={this.state.value} \n              onChange={this.onTextChange} />\n            <FrlickrCard data={res}/>\n       </div>\n    );\n  }\n\n}\nexport default Flickr;\n","import React, { Component } from 'react';\nimport Flickr from './components/FlickrService'\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Flickr/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}